package main

import (
	"embed"
	"flag"
	"fmt"
	"html/template"
	"io/fs"
	"net/http"
	"os"
	"path/filepath"

	"github.com/olivere/vite"
)

//go:embed all:dist
var dist embed.FS

//go:embed all:public
var public embed.FS

func main() {
	var (
		isDev = flag.Bool("dev", false, "run in development mode")
	)
	flag.Parse()

	if *isDev {
		runDevServer()
	} else {
		runProdServer()
	}
}

func runDevServer() {
	mux := http.NewServeMux()

	assets := http.FileServerFS(os.DirFS("."))

	mux.Handle("/src/assets/", assets)

	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path == "/" || r.URL.Path == "/index.html" {
			viteFragment, err := vite.HTMLFragment(vite.Config{
				FS:      os.DirFS("."),
				IsDev:   true,
				ViteURL: "http://localhost:5173",
			})
			if err != nil {
				http.Error(w, "Error instantiating vite fragment", http.StatusInternalServerError)
				return
			}

			tmpl, err := template.New("index").Parse(indexTmpl)
			if err != nil {
				http.Error(w, "Error parsing template", http.StatusInternalServerError)
				return
			}

			if err = tmpl.Execute(w, map[string]interface{}{
				"Vite": viteFragment,
			}); err != nil {
				http.Error(w, "Error executing template", http.StatusInternalServerError)
				return
			}
			return
		}

		// Serve files in the public directory. By default, these files are
		// referenced in the DOM with a root-relative URL format (e.g. '/file.ext').
		http.ServeFileFS(w, r, os.DirFS("./public"), filepath.Base(r.URL.Path))
	})

	server := &http.Server{
		Addr:    "localhost:8080",
		Handler: mux,
	}

	if err := server.ListenAndServe(); err != nil {
		panic(err)
	}
}

func runProdServer() {
	distFS, err := fs.Sub(dist, "dist")
	if err != nil {
		panic(fmt.Errorf("creating sub-filesystem for 'dist' directory: %w\n", err))
	}

	mux := http.NewServeMux()

	assets := http.FileServerFS(distFS)

	// Handle requests for Vite-managed assets.
	mux.Handle("/assets/", assets)

	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path == "/" || r.URL.Path == "/index.html" {
			viteFragment, err := vite.HTMLFragment(vite.Config{
				FS:    distFS,
				IsDev: false,
			})
			if err != nil {
				http.Error(w, "Error instantiating vite fragment", http.StatusInternalServerError)
				return
			}

			tmpl, err := template.New("index").Parse(indexTmpl)
			if err != nil {
				http.Error(w, "Error parsing template", http.StatusInternalServerError)
				return
			}

			if err = tmpl.Execute(w, map[string]interface{}{
				"Vite": viteFragment,
			}); err != nil {
				http.Error(w, "Error executing template", http.StatusInternalServerError)
				return
			}
			return
		}

		// Serve the public files generated by Vite. By default, these files are
		// referenced in the DOM with a root-relative URL format (e.g. '/file.ext').
		http.ServeFileFS(w, r, distFS, filepath.Base(r.URL.Path))
	})

	server := &http.Server{
		Addr:    "localhost:8080",
		Handler: mux,
	}

	if err = server.ListenAndServe(); err != nil {
		panic(err)
	}
}

var indexTmpl = `<!doctype html>
<html lang="en" class="h-full scroll-smooth">
  <head>
    <meta charset="UTF-8" />
		{{ .Vite.Tags }}
 </head>
  <body class="min-h-screen antialiased">
    <div id="root"></div>
  </body>
</html>
`
